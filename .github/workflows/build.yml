name: Build project

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

  workflow_dispatch:

jobs:
  build:
    runs-on: judong
    timeout-minutes: 30
    env: 
      SIGN_KEY_ID: ${{ secrets.GPG_KEYNAME }}
      SIGN_KEY_PASS: ${{ secrets.GPG_PASSPHRASE }}
      SIGN_KEY: ${{ secrets.GPG_SECRET_KEYS }}
    outputs:
      version: ${{ steps.version.outputs.version }}
      message: ${{ steps.success_message.outputs.message }}${{ steps.failure_message.outputs.message }}${{ steps.cancel_message.outputs.message }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Project context
        id: context
        uses: zero88/gh-project-context@v1.1

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'zulu'
          gpg-private-key: ${{ secrets.GPG_SECRET_KEYS }}
          gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Calculate version number
        id: version
        run: |-
          TAG_NAME=$(echo "${{ steps.context.outputs.branch }}" | cut -d ' ' -f2 | tr '#\/\.-' '_')
          BASE_VERSION=$(./mvnw org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dtycho.mode=maven -DskipModules=true -Dexpression=project.version -q -DforceStdout | cut -d'-' -f 1)
          VERSION_NUMBER=${BASE_VERSION}.$(date +%Y%m%d_%H%M%S)_${{ steps.context.outputs.shortCommitId }}_${TAG_NAME//[(\)]}
          echo "Base version from POM: $BASE_VERSION"
          echo "Building version: ${VERSION_NUMBER}"
          echo "::set-output name=version::${VERSION_NUMBER}"

      - name: Remove settings.xml
        run: rm $HOME/.m2/settings.xml || true

      - name: Setup maven settings.xml
        uses: whelk-io/maven-settings-xml-action@v20
        with:
          servers: >
            [
                {
                    "id": "judong-nexus-mirror",
                    "username": "${{ secrets.JUDONG_NEXUS_USERNAME }}",
                    "password": "${{ secrets.JUDONG_NEXUS_PASSWORD }}"
                },
                {
                    "id": "judong-nexus-distribution",
                    "username": "${{ secrets.JUDONG_NEXUS_USERNAME }}",
                    "password": "${{ secrets.JUDONG_NEXUS_PASSWORD }}"
                }
            ]
          mirrors: >
            [
                {
                    "id": "judong-nexus-mirror",
                    "mirrorOf": "*",
                    "url": "https://nexus.judo.technology/repository/maven-judong/"
                 }
            ]

      - name: Print settings.xml
        run: cat $HOME/.m2/settings.xml

      #      - name: Cache Maven packages
      #        uses: actions/cache@v2
      #        with:
      #          path: ~/.m2
      #          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
      #          restore-keys: ${{ runner.os }}-m2-

      #      - name: Set project version
      #        run: |-
      #          ./mvnw -B -Dstyle.color=always \
      #          -DnewVersion=${{ steps.version.outputs.version }} \
      #          -DgenerateBackupPoms=false \
      #          -Dtycho.mode=maven \
      #          versions:set
      #
      #      - name: Update target definition
      #        run: |-
      #          ./mvnw -B -Dstyle.color=always \
      #          -Dtycho.mode=maven  \
      #          -P update-target-versions \
      #          -f ./targetdefinition/pom.xml \
      #          validate
      #
      #      - name: Update category
      #        run: |-
      #         ./mvnw -B -Dstyle.color=always \
      #          -Dtycho.mode=maven \
      #          -P update-category-versions \
      #          -f ./site/pom.xml \
      #          validate
      #
      #      - name: Set tycho version
      #        run: |-
      #          ./mvnw -B -Dstyle.color=always \
      #          -Dtycho.mode=maven  \
      #          -P update-category-versions \
      #          tycho-versions:update-eclipse-metadata
      #
#      - name: Build with Maven
#        run: |-
#          ./mvnw -B -Dstyle.color=always \
#          -Drevision=${{ steps.version.outputs.version }} \
#          -Psign-artifacts,release-judong \
#          deploy
      #      - name: Release P2
      #        run: |-
      #          ./mvnw -B -Dstyle.color=always \
      #          -Dtycho.mode=maven \
      #          -Prelease-dummy,release-p2-judong \
      #          -DdeployOnly \
      #          -DskipTests=true \
      #          -DskipModules=true \
      #          deploy

      - name: Create success message
        id: success_message
        if: ${{ !failure() && !cancelled() }}
        run: |-
            message=":check_mark_button: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            message="${message} Version: ${{ steps.version.outputs.version }}"
            message="${message} User: ${{ github.actor }}"
            message="${message} Commit: ${{ steps.context.outputs.commitMsg }}"
            echo "::set-output name=message::${message}"

      - name: Create failure message
        id: failure_message
        if: ${{ failure() }}
        run: |-
            message=":cross_mark: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            message="${message} User: ${{ github.actor }}"
            message="${message} Commit: ${{ steps.context.outputs.commitMsg }}"
            echo "::set-output name=message::${message}"

      - name: Create cancel message
        id: cancel_message
        if: ${{ cancelled() }}
        run: |-
            message=":warning: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            message="${message} User: ${{ github.actor }}"
            message="${message} Commit: ${{ steps.context.outputs.commitMsg }}"
            echo "::set-output name=message::${message}"

      - name: Push tag
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.version.outputs.version }}

  send_message_to_skype:
    runs-on: judong
    timeout-minutes: 1
    needs: [build]
    if: always()
    steps:
      - name: Write message to file
        run: |-
          echo "${{needs.build.outputs.message}}" > build.msg
      - name: Send message to skype
        uses: Eloco/docker-action-send-skype@v2
        if: always()
        with:
          skype_username: ${{ secrets.SKYPE_USERNAME }}
          skype_password: ${{ secrets.SKYPE_PASSWORD }}
          skype_ids: 19:0503749da2e44ed9910046678012bdf7@thread.skype
          send_msg_path: build.msg

  release_on_feature:
    runs-on: judong
    timeout-minutes: 1
    needs: [build]
    if: ${{ always() && contains(github.head_ref, 'feature') && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) }}
    steps:
      - name: Create Release
        run: |- 
          echo "Ref: ${{ github.ref }}"
          echo "Head ref: ${{ github.head_ref }}"
          echo "Base ref: ${{ github.base_ref }}"

#      - name: Create Release
#        uses: marvinpinto/action-automatic-releases@latest
#        with:
#          automatic_release_tag: v${{needs.build.outputs.version}}
#          repo_token: ${{ secrets.GITHUB_TOKEN }}
#          title: Release v${{needs.build.outputs.version}}
#          draft: true
#          prerelease: false

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Release v${{needs.build.outputs.version}}
          tag: v${{needs.build.outputs.version}}
          draft: true
          prerelease: false

  release_on_develop:
    runs-on: judong
    timeout-minutes: 1
    needs: [build]
    if: ${{ always() && contains(github.head_ref, 'develop') && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) }}
    steps:
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          tag: latest
          prerelease: true